# Generated by Django 4.1.7 on 2023-06-07 09:59

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anketa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='')),
                ('name', models.CharField(max_length=50)),
                ('fname', models.CharField(max_length=50)),
                ('lname', models.CharField(max_length=50)),
                ('koyadress', models.CharField(max_length=50)),
                ('state', models.CharField(blank=True, choices=[("avg'oniston", "Avg'oniston"), ('eron', 'ERON'), ("o'zbekiston", "O'ZBEKISTON"), ('ozarbayjon', 'OZARBAYJON'), ("qizg'iziston", "QIRG'IZISTON"), ("qozog'iston", "QOZOG'ISTON"), ('rossiya', 'ROSSIYA'), ('tojikiston', 'TOJIKISTON'), ('turkiya', 'TURKIYA'), ('turkmaniston', 'TURKMANISTON')], max_length=50, null=True)),
                ('password', models.CharField(max_length=9)),
                ('passwordpnfl', models.CharField(max_length=14)),
                ('malumot', models.CharField(max_length=30)),
                ('adress', models.CharField(max_length=50)),
                ('workadress', models.CharField(max_length=50)),
                ('number', models.CharField(max_length=12)),
                ('email', models.EmailField(max_length=254)),
                ('web_chart', models.CharField(blank=True, max_length=30, null=True)),
                ('studentcount', models.CharField(max_length=30)),
                ('job', models.CharField(blank=True, choices=[('bosh kiyimlar tayyorlash', 'bosh kiyimlar tayyorlash'), ('charm mahsulotlari', 'charm mahsulotlari'), ('chinni, fayans va sopol buyumlari', 'chinni, fayans va sopol buyumlari'), ('emallash ishlari', 'emallash ishlari'), ('esdalik buyumlari', 'esdalik buyumlari'), ("ganch o'ymakorligi", "ganch o'ymakorligi"), ('gul bosilgan gazlamalar va chokli buyumlar', 'gul bosilgan gazlamalar va chokli buyumlar'), ('hajmli va shaklli qoliplarda quyilgan buyumlar', 'hajmli va shaklli qoliplarda quyilgan buyumlar'), ('kandakorlik, misgarlik buyumlari', 'kandakorlik, misgarlik buyumlari'), ('kashtachilik', 'kashtachilik'), ("ko'zgu tayyorlash", "ko'zgu tayyorlash"), ('mayda haykaltaroshlik buyumlari', 'mayda haykaltaroshlik buyumlari'), ('metalldan yasalgan buyumlar', 'metalldan yasalgan buyumlar'), ('milliy liboslar tayyorlash', 'milliy liboslar tayyorlash'), ('milliy poyabzal tayyorlash', 'milliy poyabzal tayyorlash'), ("miniatyura, rang tasvir, naqqoshlik va bo'yoqli naqshlar", "miniatyura, rang tasvir, naqqoshlik va bo'yoqli naqshlar"), ('mozaika ishlari', 'mozaika ishlari'), ('mualliflik mebellarini tayyorlash', 'mualliflik mebellarini tayyorlash'), ('musiqa asboblari', 'musiqa asboblari'), ("novdalardan buyumlar to'qish", "novdalardan buyumlar to'qish"), ("o'yinchoqlar", "o'yinchoqlar"), ('oddiy metalldan milliy uslubda tayyorlangan taqinchoqlar', 'oddiy metalldan milliy uslubda tayyorlangan taqinchoqlar'), ('pechka va kaminlar yasash', 'pechka va kaminlar yasash'), ('qimmatbaho metalldan yasalgan zargarlik buyumlari', 'qimmatbaho metalldan yasalgan zargarlik buyumlari'), ("qo'lda gazlamalar to'qish", "qo'lda gazlamalar to'qish"), ("qo'lda gilam to'qish", "qo'lda gilam to'qish"), ('shisha puflash ishlari', 'shisha puflash ishlari'), ('soatsozlik', 'soatsozlik'), ("suyakka o'yma naqsh solish", "suyakka o'yma naqsh solish"), ("tosh o'ymakorligi", "tosh o'ymakorligi"), ('tunukadan yasalgan buyumlar', 'tunukadan yasalgan buyumlar'), ("yog'och o'ymakorligi", "yog'och o'ymakorligi"), ("yog'ochdan tayyorlangan xalq hunarmandchiligi mahsulotlari", "yog'ochdan tayyorlangan xalq hunarmandchiligi mahsulotlari"), ("zardo'zlik buyumlari", "zardo'zlik buyumlari")], max_length=150, null=True)),
                ('grift', models.CharField(blank=True, choices=[('tavsiyanoma', 'Tavsiyanoma'), ('xalq ustasi', 'Xalq ustasi'), ("xalqaro ko'rgazma, ko'rik tanlov, festival g'olibi yoki lauriyati", "Xalqaro ko'rgazma, ko'rik tanlov, festival g'olibi yoki lauriyati")], max_length=155, null=True)),
                ('memberyear', models.CharField(max_length=50)),
                ('award', models.CharField(max_length=155)),
                ('festival', models.CharField(max_length=155)),
                ('nationalfest', models.CharField(max_length=155)),
                ('owngalery', models.CharField(max_length=155)),
                ('teacherabout', models.CharField(max_length=155)),
                ('orginalwork', models.CharField(max_length=155)),
                ('modepraduct', models.CharField(max_length=155)),
                ('addinform', models.CharField(max_length=155)),
                ('photos', models.ImageField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
